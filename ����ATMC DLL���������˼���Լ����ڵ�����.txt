2016/6/29 15:24:42 [星期三] 建行ATMC DLL的整体设计思想以及存在的问题：
建行收发的都是XML报文，ATMC机器通过Notify函数给我下发XML报文，我用boost库里面的property_tree库来解析XML，提取出来其中对于我们有用的部分字段，然后根据报文不同分别处理，增补我们的锁具所需要的其他字段，然后同样是用property_tree库，把组织好的数据，变为我们的锁具所能识别的json格式，然后通过jcHidSendData等函数，通过HID接口发送给USB线路连接的我们的锁具，然后接收锁具返回的json回应报文，解析出来其中各个字段，再看建行要求的XML回复报文包含哪些字段，补齐所需数据，生成结果XML报文，然后通过ATMC机器在初始化时调用SetRecvMsgRotine设定的回调函数，把结果XML报文返回给ATMC机器；
这个过程中，有些坑，特别是从14年冬季到15年冬季这一年间反复折腾的事情，就是建行这些XML报文实际上是无状态的，要求我们任何时候都及时(大约在1秒以内)回复其刚刚下发的报文，但是由于锁具处理速度的缘故，可能到来顺序为1，2，3的报文，自然处理完毕，返回顺序也许是2，3，1，而此时从ATMC角度来看，发下去报文1，收到回复2，ATMC就认为回复非法，就会在ATM机器的界面上报错误；或者有时候由于锁具内部阻塞处理一些其他事情，导致经过比如10秒的等待倒也收到了报文1的回应，但是加钞人员就会觉得太慢；最要命的是，ATMC程序的开发商，紫金技术有限公司，一直是高高在上的姿态，不告诉我们任何关于他们怎么调用我们的DLL的情况，对我们提出的任何问题都拒绝改进，只说“人家能做到你们怎么做不到？”，例如有一个诡异的问题就是，我们的DLL除了Windows自身的系统DLL以外，不能调用任何第三方的DLL，否则他们的上层系统调用我们的接口DLL就会失败，问他们为什么，从来没有回答过；所以14年冬季以来的一年期间，就是凭着我们的DLL自己记录的日志，各种猜测之后做调整，但是这些各种调整由于都是根据猜测而做出的，所以也不知道会不会有别的影响，所以如果改动容易牵一发而动全身，所以现在要想改动还是有难度的；